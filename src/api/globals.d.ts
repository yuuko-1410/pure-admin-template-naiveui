/* tslint:disable */
/* eslint-disable */
/**
 * Service - version 1
 *
 * Service API
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export type None = object;
export type R_None = {
  code?: number;
  message?: string;
  data?: None;
};
export type UserAddInput = {
  /**
   * username
   */
  username?: string;
  /**
   * password
   */
  password?: string;
  roleIds?: number[];
};
export type UserLoginView_TargetOf_roles = {
  /**
   * role_name
   */
  roleName?: string;
  /**
   * role_code
   */
  roleCode?: string;
};
export type UserLoginView = {
  /**
   * id
   */
  id?: number;
  /**
   * username
   */
  username?: string;
  roles?: UserLoginView_TargetOf_roles[];
  token?: string;
};
export type R_UserLoginView = {
  code?: number;
  message?: string;
  /**
   * <p>
   *  sys_user
   * </p>
   */
  data?: UserLoginView;
};
export type UserLoginInput = {
  /**
   * username
   */
  username?: string;
  /**
   * password
   */
  password?: string;
};
export type UserUpdateInpit = {
  /**
   * id
   */
  id?: number | null;
  /**
   * username
   */
  username?: string | null;
  /**
   * password
   */
  password?: string | null;
  roleIds?: number[] | null;
};
declare global {
  interface Apis {
    UserService: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /user/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // username
       *   username?: string
       *   // password
       *   password?: string
       *   roleIds?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   message?: string
       *   data?: object
       * }
       * ```
       */
      addUser<
        Config extends Alova2MethodConfig<R_None> & {
          data: UserAddInput;
        }
      >(
        config: Config
      ): Alova2Method<R_None, 'UserService.addUser', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /user/login
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // username
       *   username?: string
       *   // password
       *   password?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   message?: string
       *   // <p>
       *   //  sys_user
       *   // </p>
       *   data?: {
       *     // id
       *     id?: number
       *     // username
       *     username?: string
       *     roles?: Array<{
       *       // role_name
       *       roleName?: string
       *       // role_code
       *       roleCode?: string
       *     }>
       *     token?: string
       *   }
       * }
       * ```
       */
      login<
        Config extends Alova2MethodConfig<R_UserLoginView> & {
          data: UserLoginInput;
        }
      >(
        config: Config
      ): Alova2Method<R_UserLoginView, 'UserService.login', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /user/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // id
       *   id?: number | null
       *   // username
       *   username?: string | null
       *   // password
       *   password?: string | null
       *   roleIds?: number[] | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   message?: string
       *   data?: object
       * }
       * ```
       */
      updateUser<
        Config extends Alova2MethodConfig<R_None> & {
          data: UserUpdateInpit;
        }
      >(
        config: Config
      ): Alova2Method<R_None, 'UserService.updateUser', Config>;
    };
  }

  var Apis: Apis;
}
